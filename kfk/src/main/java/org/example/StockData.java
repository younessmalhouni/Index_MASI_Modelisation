/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.example;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class StockData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8289177823435990738L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StockData\",\"namespace\":\"org.example\",\"fields\":[{\"name\":\"field_best_ask_price\",\"type\":\"double\"},{\"name\":\"field_best_ask_size\",\"type\":\"double\"},{\"name\":\"field_best_bid_price\",\"type\":\"double\"},{\"name\":\"field_best_bid_size\",\"type\":\"double\"},{\"name\":\"field_capitalisation\",\"type\":\"double\"},{\"name\":\"field_closing_price\",\"type\":\"double\"},{\"name\":\"field_cours_ajuste\",\"type\":\"double\"},{\"name\":\"field_cours_courant\",\"type\":\"double\"},{\"name\":\"field_cumul_titres_echanges\",\"type\":\"double\"},{\"name\":\"field_cumul_volume_echange\",\"type\":\"double\"},{\"name\":\"field_date_application\",\"type\":\"long\"},{\"name\":\"field_difference\",\"type\":\"double\"},{\"name\":\"field_dynamic_reference_price\",\"type\":\"double\"},{\"name\":\"field_high_price\",\"type\":\"double\"},{\"name\":\"field_last_traded_price\",\"type\":\"double\"},{\"name\":\"field_last_traded_time\",\"type\":\"long\"},{\"name\":\"field_low_price\",\"type\":\"double\"},{\"name\":\"field_market_id\",\"type\":\"double\"},{\"name\":\"field_opening_price\",\"type\":\"double\"},{\"name\":\"field_ratio_ajustement\",\"type\":\"double\"},{\"name\":\"field_ratio_consolide\",\"type\":\"double\"},{\"name\":\"field_static_reference_price\",\"type\":\"double\"},{\"name\":\"field_symbol\",\"type\":\"double\"},{\"name\":\"field_total_trades\",\"type\":\"double\"},{\"name\":\"field_transact_time\",\"type\":\"long\"},{\"name\":\"field_var_pto\",\"type\":\"double\"},{\"name\":\"field_var_veille\",\"type\":\"double\"},{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"ticker\",\"type\":\"string\"},{\"name\":\"sous_secteur\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<StockData> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StockData> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<StockData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<StockData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<StockData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this StockData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a StockData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a StockData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static StockData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private double field_best_ask_price;
  private double field_best_ask_size;
  private double field_best_bid_price;
  private double field_best_bid_size;
  private double field_capitalisation;
  private double field_closing_price;
  private double field_cours_ajuste;
  private double field_cours_courant;
  private double field_cumul_titres_echanges;
  private double field_cumul_volume_echange;
  private long field_date_application;
  private double field_difference;
  private double field_dynamic_reference_price;
  private double field_high_price;
  private double field_last_traded_price;
  private long field_last_traded_time;
  private double field_low_price;
  private double field_market_id;
  private double field_opening_price;
  private double field_ratio_ajustement;
  private double field_ratio_consolide;
  private double field_static_reference_price;
  private double field_symbol;
  private double field_total_trades;
  private long field_transact_time;
  private double field_var_pto;
  private double field_var_veille;
  private java.lang.CharSequence label;
  private java.lang.CharSequence ticker;
  private java.lang.CharSequence sous_secteur;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StockData() {}

  /**
   * All-args constructor.
   * @param field_best_ask_price The new value for field_best_ask_price
   * @param field_best_ask_size The new value for field_best_ask_size
   * @param field_best_bid_price The new value for field_best_bid_price
   * @param field_best_bid_size The new value for field_best_bid_size
   * @param field_capitalisation The new value for field_capitalisation
   * @param field_closing_price The new value for field_closing_price
   * @param field_cours_ajuste The new value for field_cours_ajuste
   * @param field_cours_courant The new value for field_cours_courant
   * @param field_cumul_titres_echanges The new value for field_cumul_titres_echanges
   * @param field_cumul_volume_echange The new value for field_cumul_volume_echange
   * @param field_date_application The new value for field_date_application
   * @param field_difference The new value for field_difference
   * @param field_dynamic_reference_price The new value for field_dynamic_reference_price
   * @param field_high_price The new value for field_high_price
   * @param field_last_traded_price The new value for field_last_traded_price
   * @param field_last_traded_time The new value for field_last_traded_time
   * @param field_low_price The new value for field_low_price
   * @param field_market_id The new value for field_market_id
   * @param field_opening_price The new value for field_opening_price
   * @param field_ratio_ajustement The new value for field_ratio_ajustement
   * @param field_ratio_consolide The new value for field_ratio_consolide
   * @param field_static_reference_price The new value for field_static_reference_price
   * @param field_symbol The new value for field_symbol
   * @param field_total_trades The new value for field_total_trades
   * @param field_transact_time The new value for field_transact_time
   * @param field_var_pto The new value for field_var_pto
   * @param field_var_veille The new value for field_var_veille
   * @param label The new value for label
   * @param ticker The new value for ticker
   * @param sous_secteur The new value for sous_secteur
   */
  public StockData(java.lang.Double field_best_ask_price, java.lang.Double field_best_ask_size, java.lang.Double field_best_bid_price, java.lang.Double field_best_bid_size, java.lang.Double field_capitalisation, java.lang.Double field_closing_price, java.lang.Double field_cours_ajuste, java.lang.Double field_cours_courant, java.lang.Double field_cumul_titres_echanges, java.lang.Double field_cumul_volume_echange, java.lang.Long field_date_application, java.lang.Double field_difference, java.lang.Double field_dynamic_reference_price, java.lang.Double field_high_price, java.lang.Double field_last_traded_price, java.lang.Long field_last_traded_time, java.lang.Double field_low_price, java.lang.Double field_market_id, java.lang.Double field_opening_price, java.lang.Double field_ratio_ajustement, java.lang.Double field_ratio_consolide, java.lang.Double field_static_reference_price, java.lang.Double field_symbol, java.lang.Double field_total_trades, java.lang.Long field_transact_time, java.lang.Double field_var_pto, java.lang.Double field_var_veille, java.lang.CharSequence label, java.lang.CharSequence ticker, java.lang.CharSequence sous_secteur) {
    this.field_best_ask_price = field_best_ask_price;
    this.field_best_ask_size = field_best_ask_size;
    this.field_best_bid_price = field_best_bid_price;
    this.field_best_bid_size = field_best_bid_size;
    this.field_capitalisation = field_capitalisation;
    this.field_closing_price = field_closing_price;
    this.field_cours_ajuste = field_cours_ajuste;
    this.field_cours_courant = field_cours_courant;
    this.field_cumul_titres_echanges = field_cumul_titres_echanges;
    this.field_cumul_volume_echange = field_cumul_volume_echange;
    this.field_date_application = field_date_application;
    this.field_difference = field_difference;
    this.field_dynamic_reference_price = field_dynamic_reference_price;
    this.field_high_price = field_high_price;
    this.field_last_traded_price = field_last_traded_price;
    this.field_last_traded_time = field_last_traded_time;
    this.field_low_price = field_low_price;
    this.field_market_id = field_market_id;
    this.field_opening_price = field_opening_price;
    this.field_ratio_ajustement = field_ratio_ajustement;
    this.field_ratio_consolide = field_ratio_consolide;
    this.field_static_reference_price = field_static_reference_price;
    this.field_symbol = field_symbol;
    this.field_total_trades = field_total_trades;
    this.field_transact_time = field_transact_time;
    this.field_var_pto = field_var_pto;
    this.field_var_veille = field_var_veille;
    this.label = label;
    this.ticker = ticker;
    this.sous_secteur = sous_secteur;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return field_best_ask_price;
    case 1: return field_best_ask_size;
    case 2: return field_best_bid_price;
    case 3: return field_best_bid_size;
    case 4: return field_capitalisation;
    case 5: return field_closing_price;
    case 6: return field_cours_ajuste;
    case 7: return field_cours_courant;
    case 8: return field_cumul_titres_echanges;
    case 9: return field_cumul_volume_echange;
    case 10: return field_date_application;
    case 11: return field_difference;
    case 12: return field_dynamic_reference_price;
    case 13: return field_high_price;
    case 14: return field_last_traded_price;
    case 15: return field_last_traded_time;
    case 16: return field_low_price;
    case 17: return field_market_id;
    case 18: return field_opening_price;
    case 19: return field_ratio_ajustement;
    case 20: return field_ratio_consolide;
    case 21: return field_static_reference_price;
    case 22: return field_symbol;
    case 23: return field_total_trades;
    case 24: return field_transact_time;
    case 25: return field_var_pto;
    case 26: return field_var_veille;
    case 27: return label;
    case 28: return ticker;
    case 29: return sous_secteur;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: field_best_ask_price = (java.lang.Double)value$; break;
    case 1: field_best_ask_size = (java.lang.Double)value$; break;
    case 2: field_best_bid_price = (java.lang.Double)value$; break;
    case 3: field_best_bid_size = (java.lang.Double)value$; break;
    case 4: field_capitalisation = (java.lang.Double)value$; break;
    case 5: field_closing_price = (java.lang.Double)value$; break;
    case 6: field_cours_ajuste = (java.lang.Double)value$; break;
    case 7: field_cours_courant = (java.lang.Double)value$; break;
    case 8: field_cumul_titres_echanges = (java.lang.Double)value$; break;
    case 9: field_cumul_volume_echange = (java.lang.Double)value$; break;
    case 10: field_date_application = (java.lang.Long)value$; break;
    case 11: field_difference = (java.lang.Double)value$; break;
    case 12: field_dynamic_reference_price = (java.lang.Double)value$; break;
    case 13: field_high_price = (java.lang.Double)value$; break;
    case 14: field_last_traded_price = (java.lang.Double)value$; break;
    case 15: field_last_traded_time = (java.lang.Long)value$; break;
    case 16: field_low_price = (java.lang.Double)value$; break;
    case 17: field_market_id = (java.lang.Double)value$; break;
    case 18: field_opening_price = (java.lang.Double)value$; break;
    case 19: field_ratio_ajustement = (java.lang.Double)value$; break;
    case 20: field_ratio_consolide = (java.lang.Double)value$; break;
    case 21: field_static_reference_price = (java.lang.Double)value$; break;
    case 22: field_symbol = (java.lang.Double)value$; break;
    case 23: field_total_trades = (java.lang.Double)value$; break;
    case 24: field_transact_time = (java.lang.Long)value$; break;
    case 25: field_var_pto = (java.lang.Double)value$; break;
    case 26: field_var_veille = (java.lang.Double)value$; break;
    case 27: label = (java.lang.CharSequence)value$; break;
    case 28: ticker = (java.lang.CharSequence)value$; break;
    case 29: sous_secteur = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'field_best_ask_price' field.
   * @return The value of the 'field_best_ask_price' field.
   */
  public double getFieldBestAskPrice() {
    return field_best_ask_price;
  }


  /**
   * Sets the value of the 'field_best_ask_price' field.
   * @param value the value to set.
   */
  public void setFieldBestAskPrice(double value) {
    this.field_best_ask_price = value;
  }

  /**
   * Gets the value of the 'field_best_ask_size' field.
   * @return The value of the 'field_best_ask_size' field.
   */
  public double getFieldBestAskSize() {
    return field_best_ask_size;
  }


  /**
   * Sets the value of the 'field_best_ask_size' field.
   * @param value the value to set.
   */
  public void setFieldBestAskSize(double value) {
    this.field_best_ask_size = value;
  }

  /**
   * Gets the value of the 'field_best_bid_price' field.
   * @return The value of the 'field_best_bid_price' field.
   */
  public double getFieldBestBidPrice() {
    return field_best_bid_price;
  }


  /**
   * Sets the value of the 'field_best_bid_price' field.
   * @param value the value to set.
   */
  public void setFieldBestBidPrice(double value) {
    this.field_best_bid_price = value;
  }

  /**
   * Gets the value of the 'field_best_bid_size' field.
   * @return The value of the 'field_best_bid_size' field.
   */
  public double getFieldBestBidSize() {
    return field_best_bid_size;
  }


  /**
   * Sets the value of the 'field_best_bid_size' field.
   * @param value the value to set.
   */
  public void setFieldBestBidSize(double value) {
    this.field_best_bid_size = value;
  }

  /**
   * Gets the value of the 'field_capitalisation' field.
   * @return The value of the 'field_capitalisation' field.
   */
  public double getFieldCapitalisation() {
    return field_capitalisation;
  }


  /**
   * Sets the value of the 'field_capitalisation' field.
   * @param value the value to set.
   */
  public void setFieldCapitalisation(double value) {
    this.field_capitalisation = value;
  }

  /**
   * Gets the value of the 'field_closing_price' field.
   * @return The value of the 'field_closing_price' field.
   */
  public double getFieldClosingPrice() {
    return field_closing_price;
  }


  /**
   * Sets the value of the 'field_closing_price' field.
   * @param value the value to set.
   */
  public void setFieldClosingPrice(double value) {
    this.field_closing_price = value;
  }

  /**
   * Gets the value of the 'field_cours_ajuste' field.
   * @return The value of the 'field_cours_ajuste' field.
   */
  public double getFieldCoursAjuste() {
    return field_cours_ajuste;
  }


  /**
   * Sets the value of the 'field_cours_ajuste' field.
   * @param value the value to set.
   */
  public void setFieldCoursAjuste(double value) {
    this.field_cours_ajuste = value;
  }

  /**
   * Gets the value of the 'field_cours_courant' field.
   * @return The value of the 'field_cours_courant' field.
   */
  public double getFieldCoursCourant() {
    return field_cours_courant;
  }


  /**
   * Sets the value of the 'field_cours_courant' field.
   * @param value the value to set.
   */
  public void setFieldCoursCourant(double value) {
    this.field_cours_courant = value;
  }

  /**
   * Gets the value of the 'field_cumul_titres_echanges' field.
   * @return The value of the 'field_cumul_titres_echanges' field.
   */
  public double getFieldCumulTitresEchanges() {
    return field_cumul_titres_echanges;
  }


  /**
   * Sets the value of the 'field_cumul_titres_echanges' field.
   * @param value the value to set.
   */
  public void setFieldCumulTitresEchanges(double value) {
    this.field_cumul_titres_echanges = value;
  }

  /**
   * Gets the value of the 'field_cumul_volume_echange' field.
   * @return The value of the 'field_cumul_volume_echange' field.
   */
  public double getFieldCumulVolumeEchange() {
    return field_cumul_volume_echange;
  }


  /**
   * Sets the value of the 'field_cumul_volume_echange' field.
   * @param value the value to set.
   */
  public void setFieldCumulVolumeEchange(double value) {
    this.field_cumul_volume_echange = value;
  }

  /**
   * Gets the value of the 'field_date_application' field.
   * @return The value of the 'field_date_application' field.
   */
  public long getFieldDateApplication() {
    return field_date_application;
  }


  /**
   * Sets the value of the 'field_date_application' field.
   * @param value the value to set.
   */
  public void setFieldDateApplication(long value) {
    this.field_date_application = value;
  }

  /**
   * Gets the value of the 'field_difference' field.
   * @return The value of the 'field_difference' field.
   */
  public double getFieldDifference() {
    return field_difference;
  }


  /**
   * Sets the value of the 'field_difference' field.
   * @param value the value to set.
   */
  public void setFieldDifference(double value) {
    this.field_difference = value;
  }

  /**
   * Gets the value of the 'field_dynamic_reference_price' field.
   * @return The value of the 'field_dynamic_reference_price' field.
   */
  public double getFieldDynamicReferencePrice() {
    return field_dynamic_reference_price;
  }


  /**
   * Sets the value of the 'field_dynamic_reference_price' field.
   * @param value the value to set.
   */
  public void setFieldDynamicReferencePrice(double value) {
    this.field_dynamic_reference_price = value;
  }

  /**
   * Gets the value of the 'field_high_price' field.
   * @return The value of the 'field_high_price' field.
   */
  public double getFieldHighPrice() {
    return field_high_price;
  }


  /**
   * Sets the value of the 'field_high_price' field.
   * @param value the value to set.
   */
  public void setFieldHighPrice(double value) {
    this.field_high_price = value;
  }

  /**
   * Gets the value of the 'field_last_traded_price' field.
   * @return The value of the 'field_last_traded_price' field.
   */
  public double getFieldLastTradedPrice() {
    return field_last_traded_price;
  }


  /**
   * Sets the value of the 'field_last_traded_price' field.
   * @param value the value to set.
   */
  public void setFieldLastTradedPrice(double value) {
    this.field_last_traded_price = value;
  }

  /**
   * Gets the value of the 'field_last_traded_time' field.
   * @return The value of the 'field_last_traded_time' field.
   */
  public long getFieldLastTradedTime() {
    return field_last_traded_time;
  }


  /**
   * Sets the value of the 'field_last_traded_time' field.
   * @param value the value to set.
   */
  public void setFieldLastTradedTime(long value) {
    this.field_last_traded_time = value;
  }

  /**
   * Gets the value of the 'field_low_price' field.
   * @return The value of the 'field_low_price' field.
   */
  public double getFieldLowPrice() {
    return field_low_price;
  }


  /**
   * Sets the value of the 'field_low_price' field.
   * @param value the value to set.
   */
  public void setFieldLowPrice(double value) {
    this.field_low_price = value;
  }

  /**
   * Gets the value of the 'field_market_id' field.
   * @return The value of the 'field_market_id' field.
   */
  public double getFieldMarketId() {
    return field_market_id;
  }


  /**
   * Sets the value of the 'field_market_id' field.
   * @param value the value to set.
   */
  public void setFieldMarketId(double value) {
    this.field_market_id = value;
  }

  /**
   * Gets the value of the 'field_opening_price' field.
   * @return The value of the 'field_opening_price' field.
   */
  public double getFieldOpeningPrice() {
    return field_opening_price;
  }


  /**
   * Sets the value of the 'field_opening_price' field.
   * @param value the value to set.
   */
  public void setFieldOpeningPrice(double value) {
    this.field_opening_price = value;
  }

  /**
   * Gets the value of the 'field_ratio_ajustement' field.
   * @return The value of the 'field_ratio_ajustement' field.
   */
  public double getFieldRatioAjustement() {
    return field_ratio_ajustement;
  }


  /**
   * Sets the value of the 'field_ratio_ajustement' field.
   * @param value the value to set.
   */
  public void setFieldRatioAjustement(double value) {
    this.field_ratio_ajustement = value;
  }

  /**
   * Gets the value of the 'field_ratio_consolide' field.
   * @return The value of the 'field_ratio_consolide' field.
   */
  public double getFieldRatioConsolide() {
    return field_ratio_consolide;
  }


  /**
   * Sets the value of the 'field_ratio_consolide' field.
   * @param value the value to set.
   */
  public void setFieldRatioConsolide(double value) {
    this.field_ratio_consolide = value;
  }

  /**
   * Gets the value of the 'field_static_reference_price' field.
   * @return The value of the 'field_static_reference_price' field.
   */
  public double getFieldStaticReferencePrice() {
    return field_static_reference_price;
  }


  /**
   * Sets the value of the 'field_static_reference_price' field.
   * @param value the value to set.
   */
  public void setFieldStaticReferencePrice(double value) {
    this.field_static_reference_price = value;
  }

  /**
   * Gets the value of the 'field_symbol' field.
   * @return The value of the 'field_symbol' field.
   */
  public double getFieldSymbol() {
    return field_symbol;
  }


  /**
   * Sets the value of the 'field_symbol' field.
   * @param value the value to set.
   */
  public void setFieldSymbol(double value) {
    this.field_symbol = value;
  }

  /**
   * Gets the value of the 'field_total_trades' field.
   * @return The value of the 'field_total_trades' field.
   */
  public double getFieldTotalTrades() {
    return field_total_trades;
  }


  /**
   * Sets the value of the 'field_total_trades' field.
   * @param value the value to set.
   */
  public void setFieldTotalTrades(double value) {
    this.field_total_trades = value;
  }

  /**
   * Gets the value of the 'field_transact_time' field.
   * @return The value of the 'field_transact_time' field.
   */
  public long getFieldTransactTime() {
    return field_transact_time;
  }


  /**
   * Sets the value of the 'field_transact_time' field.
   * @param value the value to set.
   */
  public void setFieldTransactTime(long value) {
    this.field_transact_time = value;
  }

  /**
   * Gets the value of the 'field_var_pto' field.
   * @return The value of the 'field_var_pto' field.
   */
  public double getFieldVarPto() {
    return field_var_pto;
  }


  /**
   * Sets the value of the 'field_var_pto' field.
   * @param value the value to set.
   */
  public void setFieldVarPto(double value) {
    this.field_var_pto = value;
  }

  /**
   * Gets the value of the 'field_var_veille' field.
   * @return The value of the 'field_var_veille' field.
   */
  public double getFieldVarVeille() {
    return field_var_veille;
  }


  /**
   * Sets the value of the 'field_var_veille' field.
   * @param value the value to set.
   */
  public void setFieldVarVeille(double value) {
    this.field_var_veille = value;
  }

  /**
   * Gets the value of the 'label' field.
   * @return The value of the 'label' field.
   */
  public java.lang.CharSequence getLabel() {
    return label;
  }


  /**
   * Sets the value of the 'label' field.
   * @param value the value to set.
   */
  public void setLabel(java.lang.CharSequence value) {
    this.label = value;
  }

  /**
   * Gets the value of the 'ticker' field.
   * @return The value of the 'ticker' field.
   */
  public java.lang.CharSequence getTicker() {
    return ticker;
  }


  /**
   * Sets the value of the 'ticker' field.
   * @param value the value to set.
   */
  public void setTicker(java.lang.CharSequence value) {
    this.ticker = value;
  }

  /**
   * Gets the value of the 'sous_secteur' field.
   * @return The value of the 'sous_secteur' field.
   */
  public java.lang.CharSequence getSousSecteur() {
    return sous_secteur;
  }


  /**
   * Sets the value of the 'sous_secteur' field.
   * @param value the value to set.
   */
  public void setSousSecteur(java.lang.CharSequence value) {
    this.sous_secteur = value;
  }

  /**
   * Creates a new StockData RecordBuilder.
   * @return A new StockData RecordBuilder
   */
  public static org.example.StockData.Builder newBuilder() {
    return new org.example.StockData.Builder();
  }

  /**
   * Creates a new StockData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StockData RecordBuilder
   */
  public static org.example.StockData.Builder newBuilder(org.example.StockData.Builder other) {
    if (other == null) {
      return new org.example.StockData.Builder();
    } else {
      return new org.example.StockData.Builder(other);
    }
  }

  /**
   * Creates a new StockData RecordBuilder by copying an existing StockData instance.
   * @param other The existing instance to copy.
   * @return A new StockData RecordBuilder
   */
  public static org.example.StockData.Builder newBuilder(org.example.StockData other) {
    if (other == null) {
      return new org.example.StockData.Builder();
    } else {
      return new org.example.StockData.Builder(other);
    }
  }

  /**
   * RecordBuilder for StockData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StockData>
    implements org.apache.avro.data.RecordBuilder<StockData> {

    private double field_best_ask_price;
    private double field_best_ask_size;
    private double field_best_bid_price;
    private double field_best_bid_size;
    private double field_capitalisation;
    private double field_closing_price;
    private double field_cours_ajuste;
    private double field_cours_courant;
    private double field_cumul_titres_echanges;
    private double field_cumul_volume_echange;
    private long field_date_application;
    private double field_difference;
    private double field_dynamic_reference_price;
    private double field_high_price;
    private double field_last_traded_price;
    private long field_last_traded_time;
    private double field_low_price;
    private double field_market_id;
    private double field_opening_price;
    private double field_ratio_ajustement;
    private double field_ratio_consolide;
    private double field_static_reference_price;
    private double field_symbol;
    private double field_total_trades;
    private long field_transact_time;
    private double field_var_pto;
    private double field_var_veille;
    private java.lang.CharSequence label;
    private java.lang.CharSequence ticker;
    private java.lang.CharSequence sous_secteur;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.example.StockData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.field_best_ask_price)) {
        this.field_best_ask_price = data().deepCopy(fields()[0].schema(), other.field_best_ask_price);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.field_best_ask_size)) {
        this.field_best_ask_size = data().deepCopy(fields()[1].schema(), other.field_best_ask_size);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.field_best_bid_price)) {
        this.field_best_bid_price = data().deepCopy(fields()[2].schema(), other.field_best_bid_price);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.field_best_bid_size)) {
        this.field_best_bid_size = data().deepCopy(fields()[3].schema(), other.field_best_bid_size);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.field_capitalisation)) {
        this.field_capitalisation = data().deepCopy(fields()[4].schema(), other.field_capitalisation);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.field_closing_price)) {
        this.field_closing_price = data().deepCopy(fields()[5].schema(), other.field_closing_price);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.field_cours_ajuste)) {
        this.field_cours_ajuste = data().deepCopy(fields()[6].schema(), other.field_cours_ajuste);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.field_cours_courant)) {
        this.field_cours_courant = data().deepCopy(fields()[7].schema(), other.field_cours_courant);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.field_cumul_titres_echanges)) {
        this.field_cumul_titres_echanges = data().deepCopy(fields()[8].schema(), other.field_cumul_titres_echanges);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.field_cumul_volume_echange)) {
        this.field_cumul_volume_echange = data().deepCopy(fields()[9].schema(), other.field_cumul_volume_echange);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.field_date_application)) {
        this.field_date_application = data().deepCopy(fields()[10].schema(), other.field_date_application);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.field_difference)) {
        this.field_difference = data().deepCopy(fields()[11].schema(), other.field_difference);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.field_dynamic_reference_price)) {
        this.field_dynamic_reference_price = data().deepCopy(fields()[12].schema(), other.field_dynamic_reference_price);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.field_high_price)) {
        this.field_high_price = data().deepCopy(fields()[13].schema(), other.field_high_price);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.field_last_traded_price)) {
        this.field_last_traded_price = data().deepCopy(fields()[14].schema(), other.field_last_traded_price);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.field_last_traded_time)) {
        this.field_last_traded_time = data().deepCopy(fields()[15].schema(), other.field_last_traded_time);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.field_low_price)) {
        this.field_low_price = data().deepCopy(fields()[16].schema(), other.field_low_price);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.field_market_id)) {
        this.field_market_id = data().deepCopy(fields()[17].schema(), other.field_market_id);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.field_opening_price)) {
        this.field_opening_price = data().deepCopy(fields()[18].schema(), other.field_opening_price);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.field_ratio_ajustement)) {
        this.field_ratio_ajustement = data().deepCopy(fields()[19].schema(), other.field_ratio_ajustement);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (isValidValue(fields()[20], other.field_ratio_consolide)) {
        this.field_ratio_consolide = data().deepCopy(fields()[20].schema(), other.field_ratio_consolide);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
      if (isValidValue(fields()[21], other.field_static_reference_price)) {
        this.field_static_reference_price = data().deepCopy(fields()[21].schema(), other.field_static_reference_price);
        fieldSetFlags()[21] = other.fieldSetFlags()[21];
      }
      if (isValidValue(fields()[22], other.field_symbol)) {
        this.field_symbol = data().deepCopy(fields()[22].schema(), other.field_symbol);
        fieldSetFlags()[22] = other.fieldSetFlags()[22];
      }
      if (isValidValue(fields()[23], other.field_total_trades)) {
        this.field_total_trades = data().deepCopy(fields()[23].schema(), other.field_total_trades);
        fieldSetFlags()[23] = other.fieldSetFlags()[23];
      }
      if (isValidValue(fields()[24], other.field_transact_time)) {
        this.field_transact_time = data().deepCopy(fields()[24].schema(), other.field_transact_time);
        fieldSetFlags()[24] = other.fieldSetFlags()[24];
      }
      if (isValidValue(fields()[25], other.field_var_pto)) {
        this.field_var_pto = data().deepCopy(fields()[25].schema(), other.field_var_pto);
        fieldSetFlags()[25] = other.fieldSetFlags()[25];
      }
      if (isValidValue(fields()[26], other.field_var_veille)) {
        this.field_var_veille = data().deepCopy(fields()[26].schema(), other.field_var_veille);
        fieldSetFlags()[26] = other.fieldSetFlags()[26];
      }
      if (isValidValue(fields()[27], other.label)) {
        this.label = data().deepCopy(fields()[27].schema(), other.label);
        fieldSetFlags()[27] = other.fieldSetFlags()[27];
      }
      if (isValidValue(fields()[28], other.ticker)) {
        this.ticker = data().deepCopy(fields()[28].schema(), other.ticker);
        fieldSetFlags()[28] = other.fieldSetFlags()[28];
      }
      if (isValidValue(fields()[29], other.sous_secteur)) {
        this.sous_secteur = data().deepCopy(fields()[29].schema(), other.sous_secteur);
        fieldSetFlags()[29] = other.fieldSetFlags()[29];
      }
    }

    /**
     * Creates a Builder by copying an existing StockData instance
     * @param other The existing instance to copy.
     */
    private Builder(org.example.StockData other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.field_best_ask_price)) {
        this.field_best_ask_price = data().deepCopy(fields()[0].schema(), other.field_best_ask_price);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.field_best_ask_size)) {
        this.field_best_ask_size = data().deepCopy(fields()[1].schema(), other.field_best_ask_size);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.field_best_bid_price)) {
        this.field_best_bid_price = data().deepCopy(fields()[2].schema(), other.field_best_bid_price);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.field_best_bid_size)) {
        this.field_best_bid_size = data().deepCopy(fields()[3].schema(), other.field_best_bid_size);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.field_capitalisation)) {
        this.field_capitalisation = data().deepCopy(fields()[4].schema(), other.field_capitalisation);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.field_closing_price)) {
        this.field_closing_price = data().deepCopy(fields()[5].schema(), other.field_closing_price);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.field_cours_ajuste)) {
        this.field_cours_ajuste = data().deepCopy(fields()[6].schema(), other.field_cours_ajuste);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.field_cours_courant)) {
        this.field_cours_courant = data().deepCopy(fields()[7].schema(), other.field_cours_courant);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.field_cumul_titres_echanges)) {
        this.field_cumul_titres_echanges = data().deepCopy(fields()[8].schema(), other.field_cumul_titres_echanges);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.field_cumul_volume_echange)) {
        this.field_cumul_volume_echange = data().deepCopy(fields()[9].schema(), other.field_cumul_volume_echange);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.field_date_application)) {
        this.field_date_application = data().deepCopy(fields()[10].schema(), other.field_date_application);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.field_difference)) {
        this.field_difference = data().deepCopy(fields()[11].schema(), other.field_difference);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.field_dynamic_reference_price)) {
        this.field_dynamic_reference_price = data().deepCopy(fields()[12].schema(), other.field_dynamic_reference_price);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.field_high_price)) {
        this.field_high_price = data().deepCopy(fields()[13].schema(), other.field_high_price);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.field_last_traded_price)) {
        this.field_last_traded_price = data().deepCopy(fields()[14].schema(), other.field_last_traded_price);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.field_last_traded_time)) {
        this.field_last_traded_time = data().deepCopy(fields()[15].schema(), other.field_last_traded_time);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.field_low_price)) {
        this.field_low_price = data().deepCopy(fields()[16].schema(), other.field_low_price);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.field_market_id)) {
        this.field_market_id = data().deepCopy(fields()[17].schema(), other.field_market_id);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.field_opening_price)) {
        this.field_opening_price = data().deepCopy(fields()[18].schema(), other.field_opening_price);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.field_ratio_ajustement)) {
        this.field_ratio_ajustement = data().deepCopy(fields()[19].schema(), other.field_ratio_ajustement);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.field_ratio_consolide)) {
        this.field_ratio_consolide = data().deepCopy(fields()[20].schema(), other.field_ratio_consolide);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.field_static_reference_price)) {
        this.field_static_reference_price = data().deepCopy(fields()[21].schema(), other.field_static_reference_price);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.field_symbol)) {
        this.field_symbol = data().deepCopy(fields()[22].schema(), other.field_symbol);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.field_total_trades)) {
        this.field_total_trades = data().deepCopy(fields()[23].schema(), other.field_total_trades);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.field_transact_time)) {
        this.field_transact_time = data().deepCopy(fields()[24].schema(), other.field_transact_time);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.field_var_pto)) {
        this.field_var_pto = data().deepCopy(fields()[25].schema(), other.field_var_pto);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.field_var_veille)) {
        this.field_var_veille = data().deepCopy(fields()[26].schema(), other.field_var_veille);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.label)) {
        this.label = data().deepCopy(fields()[27].schema(), other.label);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.ticker)) {
        this.ticker = data().deepCopy(fields()[28].schema(), other.ticker);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.sous_secteur)) {
        this.sous_secteur = data().deepCopy(fields()[29].schema(), other.sous_secteur);
        fieldSetFlags()[29] = true;
      }
    }

    /**
      * Gets the value of the 'field_best_ask_price' field.
      * @return The value.
      */
    public double getFieldBestAskPrice() {
      return field_best_ask_price;
    }


    /**
      * Sets the value of the 'field_best_ask_price' field.
      * @param value The value of 'field_best_ask_price'.
      * @return This builder.
      */
    public org.example.StockData.Builder setFieldBestAskPrice(double value) {
      validate(fields()[0], value);
      this.field_best_ask_price = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'field_best_ask_price' field has been set.
      * @return True if the 'field_best_ask_price' field has been set, false otherwise.
      */
    public boolean hasFieldBestAskPrice() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'field_best_ask_price' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearFieldBestAskPrice() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'field_best_ask_size' field.
      * @return The value.
      */
    public double getFieldBestAskSize() {
      return field_best_ask_size;
    }


    /**
      * Sets the value of the 'field_best_ask_size' field.
      * @param value The value of 'field_best_ask_size'.
      * @return This builder.
      */
    public org.example.StockData.Builder setFieldBestAskSize(double value) {
      validate(fields()[1], value);
      this.field_best_ask_size = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'field_best_ask_size' field has been set.
      * @return True if the 'field_best_ask_size' field has been set, false otherwise.
      */
    public boolean hasFieldBestAskSize() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'field_best_ask_size' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearFieldBestAskSize() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'field_best_bid_price' field.
      * @return The value.
      */
    public double getFieldBestBidPrice() {
      return field_best_bid_price;
    }


    /**
      * Sets the value of the 'field_best_bid_price' field.
      * @param value The value of 'field_best_bid_price'.
      * @return This builder.
      */
    public org.example.StockData.Builder setFieldBestBidPrice(double value) {
      validate(fields()[2], value);
      this.field_best_bid_price = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'field_best_bid_price' field has been set.
      * @return True if the 'field_best_bid_price' field has been set, false otherwise.
      */
    public boolean hasFieldBestBidPrice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'field_best_bid_price' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearFieldBestBidPrice() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'field_best_bid_size' field.
      * @return The value.
      */
    public double getFieldBestBidSize() {
      return field_best_bid_size;
    }


    /**
      * Sets the value of the 'field_best_bid_size' field.
      * @param value The value of 'field_best_bid_size'.
      * @return This builder.
      */
    public org.example.StockData.Builder setFieldBestBidSize(double value) {
      validate(fields()[3], value);
      this.field_best_bid_size = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'field_best_bid_size' field has been set.
      * @return True if the 'field_best_bid_size' field has been set, false otherwise.
      */
    public boolean hasFieldBestBidSize() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'field_best_bid_size' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearFieldBestBidSize() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'field_capitalisation' field.
      * @return The value.
      */
    public double getFieldCapitalisation() {
      return field_capitalisation;
    }


    /**
      * Sets the value of the 'field_capitalisation' field.
      * @param value The value of 'field_capitalisation'.
      * @return This builder.
      */
    public org.example.StockData.Builder setFieldCapitalisation(double value) {
      validate(fields()[4], value);
      this.field_capitalisation = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'field_capitalisation' field has been set.
      * @return True if the 'field_capitalisation' field has been set, false otherwise.
      */
    public boolean hasFieldCapitalisation() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'field_capitalisation' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearFieldCapitalisation() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'field_closing_price' field.
      * @return The value.
      */
    public double getFieldClosingPrice() {
      return field_closing_price;
    }


    /**
      * Sets the value of the 'field_closing_price' field.
      * @param value The value of 'field_closing_price'.
      * @return This builder.
      */
    public org.example.StockData.Builder setFieldClosingPrice(double value) {
      validate(fields()[5], value);
      this.field_closing_price = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'field_closing_price' field has been set.
      * @return True if the 'field_closing_price' field has been set, false otherwise.
      */
    public boolean hasFieldClosingPrice() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'field_closing_price' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearFieldClosingPrice() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'field_cours_ajuste' field.
      * @return The value.
      */
    public double getFieldCoursAjuste() {
      return field_cours_ajuste;
    }


    /**
      * Sets the value of the 'field_cours_ajuste' field.
      * @param value The value of 'field_cours_ajuste'.
      * @return This builder.
      */
    public org.example.StockData.Builder setFieldCoursAjuste(double value) {
      validate(fields()[6], value);
      this.field_cours_ajuste = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'field_cours_ajuste' field has been set.
      * @return True if the 'field_cours_ajuste' field has been set, false otherwise.
      */
    public boolean hasFieldCoursAjuste() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'field_cours_ajuste' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearFieldCoursAjuste() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'field_cours_courant' field.
      * @return The value.
      */
    public double getFieldCoursCourant() {
      return field_cours_courant;
    }


    /**
      * Sets the value of the 'field_cours_courant' field.
      * @param value The value of 'field_cours_courant'.
      * @return This builder.
      */
    public org.example.StockData.Builder setFieldCoursCourant(double value) {
      validate(fields()[7], value);
      this.field_cours_courant = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'field_cours_courant' field has been set.
      * @return True if the 'field_cours_courant' field has been set, false otherwise.
      */
    public boolean hasFieldCoursCourant() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'field_cours_courant' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearFieldCoursCourant() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'field_cumul_titres_echanges' field.
      * @return The value.
      */
    public double getFieldCumulTitresEchanges() {
      return field_cumul_titres_echanges;
    }


    /**
      * Sets the value of the 'field_cumul_titres_echanges' field.
      * @param value The value of 'field_cumul_titres_echanges'.
      * @return This builder.
      */
    public org.example.StockData.Builder setFieldCumulTitresEchanges(double value) {
      validate(fields()[8], value);
      this.field_cumul_titres_echanges = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'field_cumul_titres_echanges' field has been set.
      * @return True if the 'field_cumul_titres_echanges' field has been set, false otherwise.
      */
    public boolean hasFieldCumulTitresEchanges() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'field_cumul_titres_echanges' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearFieldCumulTitresEchanges() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'field_cumul_volume_echange' field.
      * @return The value.
      */
    public double getFieldCumulVolumeEchange() {
      return field_cumul_volume_echange;
    }


    /**
      * Sets the value of the 'field_cumul_volume_echange' field.
      * @param value The value of 'field_cumul_volume_echange'.
      * @return This builder.
      */
    public org.example.StockData.Builder setFieldCumulVolumeEchange(double value) {
      validate(fields()[9], value);
      this.field_cumul_volume_echange = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'field_cumul_volume_echange' field has been set.
      * @return True if the 'field_cumul_volume_echange' field has been set, false otherwise.
      */
    public boolean hasFieldCumulVolumeEchange() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'field_cumul_volume_echange' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearFieldCumulVolumeEchange() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'field_date_application' field.
      * @return The value.
      */
    public long getFieldDateApplication() {
      return field_date_application;
    }


    /**
      * Sets the value of the 'field_date_application' field.
      * @param value The value of 'field_date_application'.
      * @return This builder.
      */
    public org.example.StockData.Builder setFieldDateApplication(long value) {
      validate(fields()[10], value);
      this.field_date_application = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'field_date_application' field has been set.
      * @return True if the 'field_date_application' field has been set, false otherwise.
      */
    public boolean hasFieldDateApplication() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'field_date_application' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearFieldDateApplication() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'field_difference' field.
      * @return The value.
      */
    public double getFieldDifference() {
      return field_difference;
    }


    /**
      * Sets the value of the 'field_difference' field.
      * @param value The value of 'field_difference'.
      * @return This builder.
      */
    public org.example.StockData.Builder setFieldDifference(double value) {
      validate(fields()[11], value);
      this.field_difference = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'field_difference' field has been set.
      * @return True if the 'field_difference' field has been set, false otherwise.
      */
    public boolean hasFieldDifference() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'field_difference' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearFieldDifference() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'field_dynamic_reference_price' field.
      * @return The value.
      */
    public double getFieldDynamicReferencePrice() {
      return field_dynamic_reference_price;
    }


    /**
      * Sets the value of the 'field_dynamic_reference_price' field.
      * @param value The value of 'field_dynamic_reference_price'.
      * @return This builder.
      */
    public org.example.StockData.Builder setFieldDynamicReferencePrice(double value) {
      validate(fields()[12], value);
      this.field_dynamic_reference_price = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'field_dynamic_reference_price' field has been set.
      * @return True if the 'field_dynamic_reference_price' field has been set, false otherwise.
      */
    public boolean hasFieldDynamicReferencePrice() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'field_dynamic_reference_price' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearFieldDynamicReferencePrice() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'field_high_price' field.
      * @return The value.
      */
    public double getFieldHighPrice() {
      return field_high_price;
    }


    /**
      * Sets the value of the 'field_high_price' field.
      * @param value The value of 'field_high_price'.
      * @return This builder.
      */
    public org.example.StockData.Builder setFieldHighPrice(double value) {
      validate(fields()[13], value);
      this.field_high_price = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'field_high_price' field has been set.
      * @return True if the 'field_high_price' field has been set, false otherwise.
      */
    public boolean hasFieldHighPrice() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'field_high_price' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearFieldHighPrice() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'field_last_traded_price' field.
      * @return The value.
      */
    public double getFieldLastTradedPrice() {
      return field_last_traded_price;
    }


    /**
      * Sets the value of the 'field_last_traded_price' field.
      * @param value The value of 'field_last_traded_price'.
      * @return This builder.
      */
    public org.example.StockData.Builder setFieldLastTradedPrice(double value) {
      validate(fields()[14], value);
      this.field_last_traded_price = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'field_last_traded_price' field has been set.
      * @return True if the 'field_last_traded_price' field has been set, false otherwise.
      */
    public boolean hasFieldLastTradedPrice() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'field_last_traded_price' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearFieldLastTradedPrice() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'field_last_traded_time' field.
      * @return The value.
      */
    public long getFieldLastTradedTime() {
      return field_last_traded_time;
    }


    /**
      * Sets the value of the 'field_last_traded_time' field.
      * @param value The value of 'field_last_traded_time'.
      * @return This builder.
      */
    public org.example.StockData.Builder setFieldLastTradedTime(long value) {
      validate(fields()[15], value);
      this.field_last_traded_time = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'field_last_traded_time' field has been set.
      * @return True if the 'field_last_traded_time' field has been set, false otherwise.
      */
    public boolean hasFieldLastTradedTime() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'field_last_traded_time' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearFieldLastTradedTime() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'field_low_price' field.
      * @return The value.
      */
    public double getFieldLowPrice() {
      return field_low_price;
    }


    /**
      * Sets the value of the 'field_low_price' field.
      * @param value The value of 'field_low_price'.
      * @return This builder.
      */
    public org.example.StockData.Builder setFieldLowPrice(double value) {
      validate(fields()[16], value);
      this.field_low_price = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'field_low_price' field has been set.
      * @return True if the 'field_low_price' field has been set, false otherwise.
      */
    public boolean hasFieldLowPrice() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'field_low_price' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearFieldLowPrice() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'field_market_id' field.
      * @return The value.
      */
    public double getFieldMarketId() {
      return field_market_id;
    }


    /**
      * Sets the value of the 'field_market_id' field.
      * @param value The value of 'field_market_id'.
      * @return This builder.
      */
    public org.example.StockData.Builder setFieldMarketId(double value) {
      validate(fields()[17], value);
      this.field_market_id = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'field_market_id' field has been set.
      * @return True if the 'field_market_id' field has been set, false otherwise.
      */
    public boolean hasFieldMarketId() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'field_market_id' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearFieldMarketId() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'field_opening_price' field.
      * @return The value.
      */
    public double getFieldOpeningPrice() {
      return field_opening_price;
    }


    /**
      * Sets the value of the 'field_opening_price' field.
      * @param value The value of 'field_opening_price'.
      * @return This builder.
      */
    public org.example.StockData.Builder setFieldOpeningPrice(double value) {
      validate(fields()[18], value);
      this.field_opening_price = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'field_opening_price' field has been set.
      * @return True if the 'field_opening_price' field has been set, false otherwise.
      */
    public boolean hasFieldOpeningPrice() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'field_opening_price' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearFieldOpeningPrice() {
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'field_ratio_ajustement' field.
      * @return The value.
      */
    public double getFieldRatioAjustement() {
      return field_ratio_ajustement;
    }


    /**
      * Sets the value of the 'field_ratio_ajustement' field.
      * @param value The value of 'field_ratio_ajustement'.
      * @return This builder.
      */
    public org.example.StockData.Builder setFieldRatioAjustement(double value) {
      validate(fields()[19], value);
      this.field_ratio_ajustement = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'field_ratio_ajustement' field has been set.
      * @return True if the 'field_ratio_ajustement' field has been set, false otherwise.
      */
    public boolean hasFieldRatioAjustement() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'field_ratio_ajustement' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearFieldRatioAjustement() {
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'field_ratio_consolide' field.
      * @return The value.
      */
    public double getFieldRatioConsolide() {
      return field_ratio_consolide;
    }


    /**
      * Sets the value of the 'field_ratio_consolide' field.
      * @param value The value of 'field_ratio_consolide'.
      * @return This builder.
      */
    public org.example.StockData.Builder setFieldRatioConsolide(double value) {
      validate(fields()[20], value);
      this.field_ratio_consolide = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'field_ratio_consolide' field has been set.
      * @return True if the 'field_ratio_consolide' field has been set, false otherwise.
      */
    public boolean hasFieldRatioConsolide() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'field_ratio_consolide' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearFieldRatioConsolide() {
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'field_static_reference_price' field.
      * @return The value.
      */
    public double getFieldStaticReferencePrice() {
      return field_static_reference_price;
    }


    /**
      * Sets the value of the 'field_static_reference_price' field.
      * @param value The value of 'field_static_reference_price'.
      * @return This builder.
      */
    public org.example.StockData.Builder setFieldStaticReferencePrice(double value) {
      validate(fields()[21], value);
      this.field_static_reference_price = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'field_static_reference_price' field has been set.
      * @return True if the 'field_static_reference_price' field has been set, false otherwise.
      */
    public boolean hasFieldStaticReferencePrice() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'field_static_reference_price' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearFieldStaticReferencePrice() {
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'field_symbol' field.
      * @return The value.
      */
    public double getFieldSymbol() {
      return field_symbol;
    }


    /**
      * Sets the value of the 'field_symbol' field.
      * @param value The value of 'field_symbol'.
      * @return This builder.
      */
    public org.example.StockData.Builder setFieldSymbol(double value) {
      validate(fields()[22], value);
      this.field_symbol = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'field_symbol' field has been set.
      * @return True if the 'field_symbol' field has been set, false otherwise.
      */
    public boolean hasFieldSymbol() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'field_symbol' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearFieldSymbol() {
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'field_total_trades' field.
      * @return The value.
      */
    public double getFieldTotalTrades() {
      return field_total_trades;
    }


    /**
      * Sets the value of the 'field_total_trades' field.
      * @param value The value of 'field_total_trades'.
      * @return This builder.
      */
    public org.example.StockData.Builder setFieldTotalTrades(double value) {
      validate(fields()[23], value);
      this.field_total_trades = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'field_total_trades' field has been set.
      * @return True if the 'field_total_trades' field has been set, false otherwise.
      */
    public boolean hasFieldTotalTrades() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'field_total_trades' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearFieldTotalTrades() {
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'field_transact_time' field.
      * @return The value.
      */
    public long getFieldTransactTime() {
      return field_transact_time;
    }


    /**
      * Sets the value of the 'field_transact_time' field.
      * @param value The value of 'field_transact_time'.
      * @return This builder.
      */
    public org.example.StockData.Builder setFieldTransactTime(long value) {
      validate(fields()[24], value);
      this.field_transact_time = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'field_transact_time' field has been set.
      * @return True if the 'field_transact_time' field has been set, false otherwise.
      */
    public boolean hasFieldTransactTime() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'field_transact_time' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearFieldTransactTime() {
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'field_var_pto' field.
      * @return The value.
      */
    public double getFieldVarPto() {
      return field_var_pto;
    }


    /**
      * Sets the value of the 'field_var_pto' field.
      * @param value The value of 'field_var_pto'.
      * @return This builder.
      */
    public org.example.StockData.Builder setFieldVarPto(double value) {
      validate(fields()[25], value);
      this.field_var_pto = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'field_var_pto' field has been set.
      * @return True if the 'field_var_pto' field has been set, false otherwise.
      */
    public boolean hasFieldVarPto() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'field_var_pto' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearFieldVarPto() {
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'field_var_veille' field.
      * @return The value.
      */
    public double getFieldVarVeille() {
      return field_var_veille;
    }


    /**
      * Sets the value of the 'field_var_veille' field.
      * @param value The value of 'field_var_veille'.
      * @return This builder.
      */
    public org.example.StockData.Builder setFieldVarVeille(double value) {
      validate(fields()[26], value);
      this.field_var_veille = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'field_var_veille' field has been set.
      * @return True if the 'field_var_veille' field has been set, false otherwise.
      */
    public boolean hasFieldVarVeille() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'field_var_veille' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearFieldVarVeille() {
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'label' field.
      * @return The value.
      */
    public java.lang.CharSequence getLabel() {
      return label;
    }


    /**
      * Sets the value of the 'label' field.
      * @param value The value of 'label'.
      * @return This builder.
      */
    public org.example.StockData.Builder setLabel(java.lang.CharSequence value) {
      validate(fields()[27], value);
      this.label = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'label' field has been set.
      * @return True if the 'label' field has been set, false otherwise.
      */
    public boolean hasLabel() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'label' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearLabel() {
      label = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'ticker' field.
      * @return The value.
      */
    public java.lang.CharSequence getTicker() {
      return ticker;
    }


    /**
      * Sets the value of the 'ticker' field.
      * @param value The value of 'ticker'.
      * @return This builder.
      */
    public org.example.StockData.Builder setTicker(java.lang.CharSequence value) {
      validate(fields()[28], value);
      this.ticker = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'ticker' field has been set.
      * @return True if the 'ticker' field has been set, false otherwise.
      */
    public boolean hasTicker() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'ticker' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearTicker() {
      ticker = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'sous_secteur' field.
      * @return The value.
      */
    public java.lang.CharSequence getSousSecteur() {
      return sous_secteur;
    }


    /**
      * Sets the value of the 'sous_secteur' field.
      * @param value The value of 'sous_secteur'.
      * @return This builder.
      */
    public org.example.StockData.Builder setSousSecteur(java.lang.CharSequence value) {
      validate(fields()[29], value);
      this.sous_secteur = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'sous_secteur' field has been set.
      * @return True if the 'sous_secteur' field has been set, false otherwise.
      */
    public boolean hasSousSecteur() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'sous_secteur' field.
      * @return This builder.
      */
    public org.example.StockData.Builder clearSousSecteur() {
      sous_secteur = null;
      fieldSetFlags()[29] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StockData build() {
      try {
        StockData record = new StockData();
        record.field_best_ask_price = fieldSetFlags()[0] ? this.field_best_ask_price : (java.lang.Double) defaultValue(fields()[0]);
        record.field_best_ask_size = fieldSetFlags()[1] ? this.field_best_ask_size : (java.lang.Double) defaultValue(fields()[1]);
        record.field_best_bid_price = fieldSetFlags()[2] ? this.field_best_bid_price : (java.lang.Double) defaultValue(fields()[2]);
        record.field_best_bid_size = fieldSetFlags()[3] ? this.field_best_bid_size : (java.lang.Double) defaultValue(fields()[3]);
        record.field_capitalisation = fieldSetFlags()[4] ? this.field_capitalisation : (java.lang.Double) defaultValue(fields()[4]);
        record.field_closing_price = fieldSetFlags()[5] ? this.field_closing_price : (java.lang.Double) defaultValue(fields()[5]);
        record.field_cours_ajuste = fieldSetFlags()[6] ? this.field_cours_ajuste : (java.lang.Double) defaultValue(fields()[6]);
        record.field_cours_courant = fieldSetFlags()[7] ? this.field_cours_courant : (java.lang.Double) defaultValue(fields()[7]);
        record.field_cumul_titres_echanges = fieldSetFlags()[8] ? this.field_cumul_titres_echanges : (java.lang.Double) defaultValue(fields()[8]);
        record.field_cumul_volume_echange = fieldSetFlags()[9] ? this.field_cumul_volume_echange : (java.lang.Double) defaultValue(fields()[9]);
        record.field_date_application = fieldSetFlags()[10] ? this.field_date_application : (java.lang.Long) defaultValue(fields()[10]);
        record.field_difference = fieldSetFlags()[11] ? this.field_difference : (java.lang.Double) defaultValue(fields()[11]);
        record.field_dynamic_reference_price = fieldSetFlags()[12] ? this.field_dynamic_reference_price : (java.lang.Double) defaultValue(fields()[12]);
        record.field_high_price = fieldSetFlags()[13] ? this.field_high_price : (java.lang.Double) defaultValue(fields()[13]);
        record.field_last_traded_price = fieldSetFlags()[14] ? this.field_last_traded_price : (java.lang.Double) defaultValue(fields()[14]);
        record.field_last_traded_time = fieldSetFlags()[15] ? this.field_last_traded_time : (java.lang.Long) defaultValue(fields()[15]);
        record.field_low_price = fieldSetFlags()[16] ? this.field_low_price : (java.lang.Double) defaultValue(fields()[16]);
        record.field_market_id = fieldSetFlags()[17] ? this.field_market_id : (java.lang.Double) defaultValue(fields()[17]);
        record.field_opening_price = fieldSetFlags()[18] ? this.field_opening_price : (java.lang.Double) defaultValue(fields()[18]);
        record.field_ratio_ajustement = fieldSetFlags()[19] ? this.field_ratio_ajustement : (java.lang.Double) defaultValue(fields()[19]);
        record.field_ratio_consolide = fieldSetFlags()[20] ? this.field_ratio_consolide : (java.lang.Double) defaultValue(fields()[20]);
        record.field_static_reference_price = fieldSetFlags()[21] ? this.field_static_reference_price : (java.lang.Double) defaultValue(fields()[21]);
        record.field_symbol = fieldSetFlags()[22] ? this.field_symbol : (java.lang.Double) defaultValue(fields()[22]);
        record.field_total_trades = fieldSetFlags()[23] ? this.field_total_trades : (java.lang.Double) defaultValue(fields()[23]);
        record.field_transact_time = fieldSetFlags()[24] ? this.field_transact_time : (java.lang.Long) defaultValue(fields()[24]);
        record.field_var_pto = fieldSetFlags()[25] ? this.field_var_pto : (java.lang.Double) defaultValue(fields()[25]);
        record.field_var_veille = fieldSetFlags()[26] ? this.field_var_veille : (java.lang.Double) defaultValue(fields()[26]);
        record.label = fieldSetFlags()[27] ? this.label : (java.lang.CharSequence) defaultValue(fields()[27]);
        record.ticker = fieldSetFlags()[28] ? this.ticker : (java.lang.CharSequence) defaultValue(fields()[28]);
        record.sous_secteur = fieldSetFlags()[29] ? this.sous_secteur : (java.lang.CharSequence) defaultValue(fields()[29]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StockData>
    WRITER$ = (org.apache.avro.io.DatumWriter<StockData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StockData>
    READER$ = (org.apache.avro.io.DatumReader<StockData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeDouble(this.field_best_ask_price);

    out.writeDouble(this.field_best_ask_size);

    out.writeDouble(this.field_best_bid_price);

    out.writeDouble(this.field_best_bid_size);

    out.writeDouble(this.field_capitalisation);

    out.writeDouble(this.field_closing_price);

    out.writeDouble(this.field_cours_ajuste);

    out.writeDouble(this.field_cours_courant);

    out.writeDouble(this.field_cumul_titres_echanges);

    out.writeDouble(this.field_cumul_volume_echange);

    out.writeLong(this.field_date_application);

    out.writeDouble(this.field_difference);

    out.writeDouble(this.field_dynamic_reference_price);

    out.writeDouble(this.field_high_price);

    out.writeDouble(this.field_last_traded_price);

    out.writeLong(this.field_last_traded_time);

    out.writeDouble(this.field_low_price);

    out.writeDouble(this.field_market_id);

    out.writeDouble(this.field_opening_price);

    out.writeDouble(this.field_ratio_ajustement);

    out.writeDouble(this.field_ratio_consolide);

    out.writeDouble(this.field_static_reference_price);

    out.writeDouble(this.field_symbol);

    out.writeDouble(this.field_total_trades);

    out.writeLong(this.field_transact_time);

    out.writeDouble(this.field_var_pto);

    out.writeDouble(this.field_var_veille);

    out.writeString(this.label);

    out.writeString(this.ticker);

    out.writeString(this.sous_secteur);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.field_best_ask_price = in.readDouble();

      this.field_best_ask_size = in.readDouble();

      this.field_best_bid_price = in.readDouble();

      this.field_best_bid_size = in.readDouble();

      this.field_capitalisation = in.readDouble();

      this.field_closing_price = in.readDouble();

      this.field_cours_ajuste = in.readDouble();

      this.field_cours_courant = in.readDouble();

      this.field_cumul_titres_echanges = in.readDouble();

      this.field_cumul_volume_echange = in.readDouble();

      this.field_date_application = in.readLong();

      this.field_difference = in.readDouble();

      this.field_dynamic_reference_price = in.readDouble();

      this.field_high_price = in.readDouble();

      this.field_last_traded_price = in.readDouble();

      this.field_last_traded_time = in.readLong();

      this.field_low_price = in.readDouble();

      this.field_market_id = in.readDouble();

      this.field_opening_price = in.readDouble();

      this.field_ratio_ajustement = in.readDouble();

      this.field_ratio_consolide = in.readDouble();

      this.field_static_reference_price = in.readDouble();

      this.field_symbol = in.readDouble();

      this.field_total_trades = in.readDouble();

      this.field_transact_time = in.readLong();

      this.field_var_pto = in.readDouble();

      this.field_var_veille = in.readDouble();

      this.label = in.readString(this.label instanceof Utf8 ? (Utf8)this.label : null);

      this.ticker = in.readString(this.ticker instanceof Utf8 ? (Utf8)this.ticker : null);

      this.sous_secteur = in.readString(this.sous_secteur instanceof Utf8 ? (Utf8)this.sous_secteur : null);

    } else {
      for (int i = 0; i < 30; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.field_best_ask_price = in.readDouble();
          break;

        case 1:
          this.field_best_ask_size = in.readDouble();
          break;

        case 2:
          this.field_best_bid_price = in.readDouble();
          break;

        case 3:
          this.field_best_bid_size = in.readDouble();
          break;

        case 4:
          this.field_capitalisation = in.readDouble();
          break;

        case 5:
          this.field_closing_price = in.readDouble();
          break;

        case 6:
          this.field_cours_ajuste = in.readDouble();
          break;

        case 7:
          this.field_cours_courant = in.readDouble();
          break;

        case 8:
          this.field_cumul_titres_echanges = in.readDouble();
          break;

        case 9:
          this.field_cumul_volume_echange = in.readDouble();
          break;

        case 10:
          this.field_date_application = in.readLong();
          break;

        case 11:
          this.field_difference = in.readDouble();
          break;

        case 12:
          this.field_dynamic_reference_price = in.readDouble();
          break;

        case 13:
          this.field_high_price = in.readDouble();
          break;

        case 14:
          this.field_last_traded_price = in.readDouble();
          break;

        case 15:
          this.field_last_traded_time = in.readLong();
          break;

        case 16:
          this.field_low_price = in.readDouble();
          break;

        case 17:
          this.field_market_id = in.readDouble();
          break;

        case 18:
          this.field_opening_price = in.readDouble();
          break;

        case 19:
          this.field_ratio_ajustement = in.readDouble();
          break;

        case 20:
          this.field_ratio_consolide = in.readDouble();
          break;

        case 21:
          this.field_static_reference_price = in.readDouble();
          break;

        case 22:
          this.field_symbol = in.readDouble();
          break;

        case 23:
          this.field_total_trades = in.readDouble();
          break;

        case 24:
          this.field_transact_time = in.readLong();
          break;

        case 25:
          this.field_var_pto = in.readDouble();
          break;

        case 26:
          this.field_var_veille = in.readDouble();
          break;

        case 27:
          this.label = in.readString(this.label instanceof Utf8 ? (Utf8)this.label : null);
          break;

        case 28:
          this.ticker = in.readString(this.ticker instanceof Utf8 ? (Utf8)this.ticker : null);
          break;

        case 29:
          this.sous_secteur = in.readString(this.sous_secteur instanceof Utf8 ? (Utf8)this.sous_secteur : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










